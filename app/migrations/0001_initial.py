# Generated by Django 2.2.1 on 2019-06-22 20:50

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Table_Bay',
            fields=[
                ('BayName', models.CharField(help_text='如2号主变高压侧', max_length=64, verbose_name='间隔名称')),
                ('BayType', models.CharField(choices=[('L', '线路'), ('T', '主变'), ('M', '母线'), ('N', '母联'), ('E', '其它')], default='L', help_text='ID组成部分', max_length=1, validators=[django.core.validators.MinLengthValidator(1)], verbose_name='间隔类型')),
                ('BayCode', models.CharField(help_text='ID组成部分。4位字符，按该间隔调度号命名。不足4位，在前面补0。如261间隔，应设置为0261', max_length=4, validators=[django.core.validators.MinLengthValidator(4)], verbose_name='间隔代码')),
                ('EquipmentType', models.CharField(choices=[('P', 'PT'), ('C', 'CT'), ('G', '套管'), ('E', '其它')], default='C', help_text='ID组成部分', max_length=1, validators=[django.core.validators.MinLengthValidator(1)], verbose_name='设备类型')),
                ('DataType', models.CharField(choices=[('P', '油压'), ('D', '局放'), ('T', '温度'), ('L', '介损'), ('E', '其它')], default='P', help_text='ID组成部分', max_length=1, validators=[django.core.validators.MinLengthValidator(1)], verbose_name='物理量')),
                ('GroupNo', models.CharField(default='1', max_length=1, validators=[django.core.validators.MinLengthValidator(1)], verbose_name='采集组别')),
                ('SetupMode', models.CharField(choices=[('1', '三绝'), ('2', '四绝')], default='1', max_length=1, validators=[django.core.validators.MinLengthValidator(1)], verbose_name='传感器配置')),
                ('BayID', models.CharField(blank=True, max_length=17, primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(17)], verbose_name='间隔ID')),
                ('BayMapID', models.CharField(blank=True, default='0', max_length=24, verbose_name='I2接口')),
            ],
            options={
                'verbose_name': '间隔',
                'verbose_name_plural': '间隔',
            },
        ),
        migrations.CreateModel(
            name='Table_City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ProvinceName', models.CharField(max_length=40, verbose_name='省名')),
                ('CityName', models.CharField(max_length=40, unique=True, verbose_name='市名')),
            ],
            options={
                'verbose_name': '省市表',
                'verbose_name_plural': '省市表',
            },
        ),
        migrations.CreateModel(
            name='Table_CityCompany',
            fields=[
                ('CityCompanyName', models.CharField(max_length=64, unique=True, verbose_name='市公司名称')),
                ('CityCompanyCode', models.CharField(max_length=2, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='市公司代码')),
                ('CityCompanyContacts', models.CharField(blank=True, max_length=64, null=True, verbose_name='联系人')),
                ('CityCompanyPhones', models.CharField(blank=True, max_length=64, null=True, verbose_name='电话')),
                ('CityCompanyID', models.CharField(blank=True, max_length=5, primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(5)], verbose_name='市公司ID')),
                ('CityName', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Table_City', to_field='CityName', verbose_name='所属市')),
            ],
            options={
                'verbose_name': '地市公司',
                'verbose_name_plural': '地市公司',
            },
        ),
        migrations.CreateModel(
            name='Table_Concentrator',
            fields=[
                ('ConcentratorSN', models.CharField(default='1', help_text='一位字符，如 1~9，同一站内流水号唯一', max_length=1, validators=[django.core.validators.MinLengthValidator(1)], verbose_name='流水号')),
                ('ConcentratorID', models.CharField(blank=True, max_length=9, primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(9)], verbose_name='汇集单元ID')),
                ('ConcentratorMapID', models.CharField(blank=True, default='0', max_length=24, verbose_name='汇集单元映射ID')),
            ],
            options={
                'verbose_name': '汇集单元',
                'verbose_name_plural': '汇集单元',
            },
        ),
        migrations.CreateModel(
            name='Table_ConcentratorState',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DC5VState', models.IntegerField(default=0)),
                ('MBusState', models.IntegerField(default=0)),
                ('ACMState', models.IntegerField(default=0)),
                ('SBusState', models.IntegerField(default=0)),
                ('ACSState', models.IntegerField(default=0)),
                ('IPCACMState', models.IntegerField(default=0)),
                ('IPCDC1State', models.IntegerField(default=0)),
                ('IPCACSState', models.IntegerField(default=0)),
                ('IPCDC2State', models.IntegerField(default=0)),
                ('IPCDC3State', models.IntegerField(default=0)),
                ('time', models.DateTimeField(auto_now=True)),
                ('Temperature', models.CharField(max_length=5, null=True)),
                ('AirPress', models.CharField(max_length=5, null=True)),
                ('COM1State', models.CharField(max_length=128, null=True)),
                ('COM2State', models.CharField(max_length=128, null=True)),
                ('COM3State', models.CharField(max_length=128, null=True)),
                ('COM4State', models.CharField(max_length=128, null=True)),
                ('COM5State', models.CharField(max_length=128, null=True)),
                ('COM6State', models.CharField(max_length=128, null=True)),
                ('Createtime', models.DateTimeField(null=True)),
                ('ConfirmFlag', models.BooleanField(default=False)),
                ('Confirmtime', models.DateTimeField(null=True)),
            ],
            options={
                'verbose_name': '汇集单元设备状态表',
                'verbose_name_plural': '汇集单元设备状态表',
            },
        ),
        migrations.CreateModel(
            name='Table_MessageRecv',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ReceiptHandle', models.CharField(max_length=64, null=True)),
                ('MessageID', models.CharField(max_length=64, null=True)),
                ('DestCode', models.CharField(max_length=64, null=True)),
                ('Sendtime', models.DateTimeField(auto_now=True, null=True)),
                ('SignName', models.CharField(max_length=64, null=True)),
                ('SequenceID', models.CharField(max_length=64, null=True)),
                ('PhoneNumber', models.CharField(max_length=64, null=True)),
                ('MessageContent', models.CharField(max_length=64, null=True)),
            ],
            options={
                'verbose_name': '短信接收表',
                'verbose_name_plural': '短信接收表',
            },
        ),
        migrations.CreateModel(
            name='Table_MessageSend',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('EventID', models.CharField(max_length=64, null=True)),
                ('RequestID', models.CharField(max_length=64, null=True)),
                ('BizID', models.CharField(max_length=64, null=True)),
                ('MessageContent', models.CharField(max_length=64, null=True)),
                ('MessageCode', models.CharField(max_length=64, null=True)),
                ('Sendtime', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': '短信发送表',
                'verbose_name_plural': '短信发送表',
            },
        ),
        migrations.CreateModel(
            name='Table_ProvinceCompany',
            fields=[
                ('ProvinceCompanyName', models.CharField(max_length=64, unique=True, verbose_name='省公司名称')),
                ('ProvinceCompanyCode', models.CharField(max_length=2, primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='省公司代码')),
                ('ProvinceCompanyContacts', models.CharField(blank=True, max_length=64, null=True, verbose_name='联系人')),
                ('ProvinceCompanyPhones', models.CharField(blank=True, max_length=64, null=True, verbose_name='电话')),
            ],
            options={
                'verbose_name': '省公司',
                'verbose_name_plural': '省公司',
            },
        ),
        migrations.CreateModel(
            name='Table_WarningHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('EventID', models.CharField(db_index=True, max_length=64)),
                ('Eventtime', models.DateTimeField(auto_now=True)),
                ('WarningType', models.CharField(choices=[('S100', '瞬时电热故障'), ('S102', '瞬时电热故障'), ('S200', '瞬时严重电热故障'), ('S300', '缓慢电热故障'), ('S400', '缓慢泄漏故障'), ('S500', '绝压一般告警'), ('S600', '绝压严重告警')], max_length=8)),
                ('WarningName', models.CharField(max_length=64, null=True)),
                ('PhaseName', models.CharField(choices=[('A', 'A相'), ('B', 'B相'), ('C', 'C相'), ('N', 'N相')], max_length=1, null=True)),
                ('BayID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Table_Bay', verbose_name='间隔名称')),
            ],
            options={
                'verbose_name': '历史告警信息表',
                'verbose_name_plural': '历史告警信息表',
            },
        ),
        migrations.CreateModel(
            name='Table_Warning',
            fields=[
                ('EventID', models.CharField(max_length=64, primary_key=True, serialize=False)),
                ('Eventtime', models.DateTimeField(auto_now=True)),
                ('WarningType', models.CharField(choices=[('S100', '瞬时电热故障'), ('S102', '瞬时电热故障'), ('S200', '瞬时严重电热故障'), ('H100', '缓慢电热故障'), ('H200', '缓慢泄漏故障'), ('J100', '绝压一般告警'), ('J200', '绝压严重告警')], max_length=8)),
                ('WarningName', models.CharField(max_length=64)),
                ('SubstationName', models.CharField(max_length=64)),
                ('BayName', models.CharField(max_length=64)),
                ('PhaseName', models.CharField(choices=[('A', 'A相'), ('B', 'B相'), ('C', 'C相'), ('N', 'N相')], max_length=1, null=True)),
                ('ContactPhone', models.CharField(max_length=64)),
                ('Sendtimes', models.IntegerField(default=0)),
                ('ConfirmFlag', models.BooleanField(default=False)),
                ('LastConfirmtime', models.DateTimeField(default=datetime.datetime(2000, 1, 1, 0, 0))),
                ('LastSendtime', models.DateTimeField(default=datetime.datetime(2000, 1, 1, 0, 0))),
                ('ConfirmTimes', models.IntegerField(default=0)),
                ('BayID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Table_Bay', verbose_name='间隔名称')),
            ],
            options={
                'verbose_name': '实时告警信息表',
                'verbose_name_plural': '实时告警信息表',
            },
        ),
        migrations.CreateModel(
            name='Table_Substation',
            fields=[
                ('SubstationName', models.CharField(help_text='如500kV科学城变电站', max_length=64, unique=True, verbose_name='变电站名称')),
                ('DistrictCompanyName', models.CharField(blank=True, help_text='如天府新区供电局', max_length=64, null=True, verbose_name='县公司名称')),
                ('SubstationType', models.CharField(choices=[('变电站', '变电站'), ('换流站', '换流站'), ('水电站', '水电站'), ('火电站', '火电站')], default='变电站', max_length=8, verbose_name='类别')),
                ('VoltageLevel', models.CharField(choices=[('35kV', '35kV'), ('66kV', '66kV'), ('110kV', '110kV'), ('220kV', '220kV'), ('330kV', '330kV'), ('400kV', '400kV'), ('500kV', '500kV'), ('750kV', '750kV'), ('800kV', '800kV'), ('1000kV', '1000kV')], default='220kV', max_length=8, verbose_name='电压等级')),
                ('SubstationContacts', models.CharField(blank=True, default='#成都佳信', help_text='以#开头，可填写两位联系人，如：#张三#李四', max_length=64, verbose_name='联系人')),
                ('SubstationPhones', models.CharField(blank=True, default='#13550265109', help_text='以#开头，可填写两个电话，且与联系人对应，如：#13588888888#13599999999', max_length=255, verbose_name='联系电话')),
                ('SubstationSN', models.CharField(default='01', help_text='两位字符，如 01，同一地市公司下流水号唯一', max_length=2, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='流水号')),
                ('SubstationID', models.CharField(blank=True, max_length=7, primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(7)], verbose_name='变电站ID')),
                ('CityCompanyID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Table_CityCompany', verbose_name='市公司名称')),
            ],
            options={
                'verbose_name': '变电站',
                'verbose_name_plural': '变电站',
            },
        ),
        migrations.CreateModel(
            name='Table_RealtimeData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pa', models.SmallIntegerField(blank=True, null=True, verbose_name='pa ')),
                ('pb', models.SmallIntegerField(blank=True, null=True, verbose_name='pb ')),
                ('pc', models.SmallIntegerField(blank=True, null=True, verbose_name='pc ')),
                ('pn', models.SmallIntegerField(blank=True, null=True, verbose_name='pn ')),
                ('pab', models.SmallIntegerField(blank=True, null=True, verbose_name='pab ')),
                ('pbc', models.SmallIntegerField(blank=True, null=True, verbose_name='pbc ')),
                ('pac', models.SmallIntegerField(blank=True, null=True, verbose_name='pac ')),
                ('pan', models.SmallIntegerField(blank=True, default=0, null=True, verbose_name='pan ')),
                ('pbn', models.SmallIntegerField(blank=True, default=0, null=True, verbose_name='pbn ')),
                ('pcn', models.SmallIntegerField(blank=True, default=0, null=True, verbose_name='pcn ')),
                ('pa_valid', models.BooleanField(default=False)),
                ('pb_valid', models.BooleanField(default=False)),
                ('pc_valid', models.BooleanField(default=False)),
                ('pn_valid', models.BooleanField(default=False)),
                ('pt_valid', models.BooleanField(db_index=True, default=False)),
                ('time', models.DateTimeField(db_index=True, verbose_name='time')),
                ('bay', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Table_Bay', verbose_name='间隔名称')),
            ],
            options={
                'verbose_name': '实时数据表',
                'verbose_name_plural': '实时数据表',
            },
        ),
        migrations.CreateModel(
            name='Table_Phase',
            fields=[
                ('PhaseName', models.CharField(choices=[('A', 'A相'), ('B', 'B相'), ('C', 'C相'), ('N', 'N相')], max_length=1, validators=[django.core.validators.MinLengthValidator(1)], verbose_name='相别')),
                ('SensorID', models.IntegerField(default=1, help_text='十进制', verbose_name='传感器ID')),
                ('SensorProtocol', models.CharField(default='MPM478X', max_length=10, verbose_name='通信协议')),
                ('DataBit', models.IntegerField(choices=[(5, 5), (6, 6), (7, 7), (8, 8)], default=8, verbose_name='数据位')),
                ('Baud', models.IntegerField(choices=[(1200, 1200), (2400, 2400), (4800, 4800), (9600, 9600), (14400, 14400), (19200, 19200), (38400, 38400), (56000, 56000), (115200, 115200), (194000, 194000)], default=9600, verbose_name='波特率')),
                ('Parity', models.CharField(choices=[('N', 'NONE'), ('O', 'ODD'), ('E', 'EVEN')], default='N', max_length=1, verbose_name='校验位')),
                ('StopBit', models.IntegerField(choices=[(1, 1), (2, 2)], default=1, verbose_name='停止位')),
                ('SensorScale', models.CharField(default='0~+50kPa', max_length=16, verbose_name='量程')),
                ('SensorConnectState', models.BooleanField(default=False, verbose_name='通信状态')),
                ('SensorDataState', models.BooleanField(default=False, verbose_name='数据状态')),
                ('LastConnectTime', models.DateTimeField(default=datetime.datetime(2000, 1, 1, 0, 0), verbose_name='最近一次成功采集时间')),
                ('SensorManufactor', models.CharField(default='microsensors', max_length=64, verbose_name='生产厂家')),
                ('SensorProductTime', models.CharField(blank=True, default=datetime.datetime(2000, 1, 1, 0, 0), max_length=16, verbose_name='生产年月日')),
                ('SensorVersionNo', models.CharField(blank=True, default='SN104333', max_length=20, verbose_name='序列号')),
                ('SensorRealtimeData', models.SmallIntegerField(default=-4000)),
                ('SensorRealtimeData1', models.SmallIntegerField(default=-4000)),
                ('SensorRealtimeData2', models.SmallIntegerField(default=-4000)),
                ('SensorRealtimeData3', models.SmallIntegerField(default=-4000)),
                ('PhaseID', models.CharField(blank=True, max_length=17, primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(17)], verbose_name='系统ID')),
                ('PhaseMapID', models.CharField(blank=True, default='0', max_length=24, verbose_name='I2接口')),
                ('TotalFailedCount', models.IntegerField(default=0)),
                ('NowFailedCount', models.IntegerField(default=0)),
                ('BayID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Table_Bay', verbose_name='间隔名称')),
            ],
            options={
                'verbose_name': '传感器',
                'verbose_name_plural': '传感器',
            },
        ),
        migrations.CreateModel(
            name='Table_Permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Level', models.IntegerField(choices=[(1, '省级'), (2, '市级'), (3, '站级')], default=1)),
                ('IsActive', models.BooleanField(default=True)),
                ('CityCompanyName', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Table_CityCompany', to_field='CityCompanyName', verbose_name='市公司名称')),
                ('ProvinceCompanyName', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Table_ProvinceCompany', to_field='ProvinceCompanyName', verbose_name='省公司名称')),
                ('SubstationID', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Table_Substation', verbose_name='变电站名称')),
                ('User', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, to_field='username')),
            ],
            options={
                'verbose_name': '用户权限表',
                'verbose_name_plural': '用户权限表',
            },
        ),
        migrations.CreateModel(
            name='Table_Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PhaseName', models.CharField(choices=[('A', 'A相'), ('B', 'B相'), ('C', 'C相'), ('N', 'N相')], max_length=1, null=True, verbose_name='相别')),
                ('time', models.DateTimeField(db_index=True)),
                ('Level', models.CharField(choices=[('debug', 'debug'), ('info', 'info'), ('warning', 'warning'), ('critical', 'critical')], default='info', max_length=15)),
                ('WarningType', models.CharField(default='D100', max_length=4)),
                ('WarningName', models.CharField(default='', max_length=128, verbose_name='告警内容')),
                ('Action', models.CharField(default='', max_length=16, null=True)),
                ('BayID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Table_Bay', verbose_name='间隔')),
                ('ConcentratorID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Table_Concentrator', verbose_name='汇集单元')),
                ('SubstationID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Table_Substation', verbose_name='变电站名称')),
            ],
            options={
                'verbose_name': '日志',
                'verbose_name_plural': '日志',
            },
        ),
        migrations.CreateModel(
            name='Table_I1Interface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('LDName', models.CharField(default='MONT', max_length=8, null=True, verbose_name='逻辑设备名')),
                ('LNName', models.CharField(default='TPRS', max_length=8, null=True, verbose_name='逻辑节点名')),
                ('LNInst', models.IntegerField(default=1, null=True, verbose_name='逻辑节点实例号')),
                ('DevID', models.IntegerField(default=1, null=True, verbose_name='云端ID')),
                ('DistinctNo', models.IntegerField(default=813, null=True)),
                ('ProductYear', models.IntegerField(default=19, null=True)),
                ('ProductMonth', models.IntegerField(default=5, null=True)),
                ('BayID', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='app.Table_Bay', verbose_name='间隔名称')),
            ],
            options={
                'verbose_name': 'I1接口表',
                'verbose_name_plural': 'I1接口表',
            },
        ),
        migrations.CreateModel(
            name='Table_HistoryData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pa', models.SmallIntegerField(blank=True, null=True, verbose_name='pa ')),
                ('pb', models.SmallIntegerField(blank=True, null=True, verbose_name='pb ')),
                ('pc', models.SmallIntegerField(blank=True, null=True, verbose_name='pc ')),
                ('pn', models.SmallIntegerField(blank=True, null=True, verbose_name='pn ')),
                ('pab', models.SmallIntegerField(blank=True, null=True, verbose_name='pab ')),
                ('pbc', models.SmallIntegerField(blank=True, null=True, verbose_name='pbc ')),
                ('pac', models.SmallIntegerField(blank=True, null=True, verbose_name='pac ')),
                ('pan', models.SmallIntegerField(blank=True, default=0, null=True, verbose_name='pan ')),
                ('pbn', models.SmallIntegerField(blank=True, default=0, null=True, verbose_name='pbn ')),
                ('pcn', models.SmallIntegerField(blank=True, default=0, null=True, verbose_name='pcn ')),
                ('pa_valid', models.BooleanField(default=False)),
                ('pb_valid', models.BooleanField(default=False)),
                ('pc_valid', models.BooleanField(default=False)),
                ('pn_valid', models.BooleanField(default=False)),
                ('pt_valid', models.BooleanField(db_index=True, default=False)),
                ('time', models.DateTimeField(db_index=True, verbose_name='time')),
                ('bay', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Table_Bay', verbose_name='间隔名称')),
            ],
            options={
                'verbose_name': '历史数据表',
                'verbose_name_plural': '历史数据表',
            },
        ),
        migrations.AddField(
            model_name='table_concentrator',
            name='SubstationID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Table_Substation', verbose_name='变电站名称'),
        ),
        migrations.AddField(
            model_name='table_citycompany',
            name='ProvinceCompanyID',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Table_ProvinceCompany', verbose_name='省公司名称'),
        ),
        migrations.AddField(
            model_name='table_bay',
            name='ConcentratorID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Table_Concentrator', verbose_name='汇集单元名称'),
        ),
        migrations.CreateModel(
            name='Table_AlgorithmState',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Pa0', models.SmallIntegerField(default=0)),
                ('Pb0', models.SmallIntegerField(default=0)),
                ('Pc0', models.SmallIntegerField(default=0)),
                ('Pab0', models.SmallIntegerField(default=0)),
                ('Pbc0', models.SmallIntegerField(default=0)),
                ('Pac0', models.SmallIntegerField(default=0)),
                ('Pn0', models.SmallIntegerField(default=0)),
                ('Pan0', models.SmallIntegerField(default=0)),
                ('Pbn0', models.SmallIntegerField(default=0)),
                ('Pcn0', models.SmallIntegerField(default=0)),
                ('Pda', models.SmallIntegerField(default=0)),
                ('Pdb', models.SmallIntegerField(default=0)),
                ('Pdc', models.SmallIntegerField(default=0)),
                ('Pdn', models.SmallIntegerField(default=0)),
                ('Pmina', models.SmallIntegerField(default=0)),
                ('Pminb', models.SmallIntegerField(default=0)),
                ('Pminc', models.SmallIntegerField(default=0)),
                ('Pminn', models.SmallIntegerField(default=0)),
                ('Pmaxa', models.SmallIntegerField(default=0)),
                ('Pmaxb', models.SmallIntegerField(default=0)),
                ('Pmaxc', models.SmallIntegerField(default=0)),
                ('Pmaxn', models.SmallIntegerField(default=0)),
                ('AlgEnable', models.BooleanField(default=False, verbose_name='算法启动')),
                ('AlgEnableTime', models.DateTimeField(default=datetime.datetime(2000, 1, 1, 0, 0), verbose_name='算法启动时间')),
                ('AlgCalcInitialValueStart', models.BooleanField(default=False, verbose_name='初值启动')),
                ('AlgCalcInitialValueStartTime', models.DateTimeField(default=datetime.datetime(2000, 1, 1, 0, 0), verbose_name='初值启动时间')),
                ('AlgCalcInitialValueLastTime', models.DateTimeField(default=datetime.datetime(2000, 1, 1, 0, 0), verbose_name='最新一次获取初值的时间')),
                ('AlgCalcInitialValueDone', models.BooleanField(default=False, verbose_name='初值获取完成')),
                ('AlgCalcInitialValueDoneTime', models.DateTimeField(default=datetime.datetime(2000, 1, 1, 0, 0), verbose_name='初值获取完成时间')),
                ('AlgCalcWarningValueStart', models.BooleanField(default=False, verbose_name='告警启动')),
                ('AlgCalcWarningValueStartTime', models.DateTimeField(default=datetime.datetime(2000, 1, 1, 0, 0), verbose_name='告警启动时间')),
                ('AlgCalcWarningValueLastTime', models.DateTimeField(default=datetime.datetime(2000, 1, 1, 0, 0), verbose_name='最近一次告警计算时间')),
                ('BayID', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='app.Table_Bay', verbose_name='间隔名称')),
            ],
            options={
                'verbose_name': '算法状态表',
                'verbose_name_plural': '算法状态表',
            },
        ),
        migrations.CreateModel(
            name='Table_AlgorithmSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Pet_CTPT', models.SmallIntegerField(default=25)),
                ('Pt_CTPT', models.SmallIntegerField(default=50)),
                ('Ptd_CTPT', models.SmallIntegerField(default=20)),
                ('Ptdu_CTPT', models.SmallIntegerField(default=10)),
                ('Ptdc_CTPT', models.SmallIntegerField(default=10)),
                ('Ptdcu_CTPT', models.SmallIntegerField(default=5)),
                ('Pt_TG', models.SmallIntegerField(default=400)),
                ('Ptu_TG', models.SmallIntegerField(default=300)),
                ('Ptd_TG', models.SmallIntegerField(default=200)),
                ('Ptdu_TG', models.SmallIntegerField(default=100)),
                ('Ptc_TG', models.SmallIntegerField(default=100)),
                ('Ptdc_TG', models.SmallIntegerField(default=100)),
                ('Ptdcu_TG', models.SmallIntegerField(default=50)),
                ('Ptcd', models.SmallIntegerField(default=2300)),
                ('Ptcd_R1', models.FloatField(default=0.6)),
                ('Ptcd_R2', models.FloatField(default=0.8)),
                ('Pd_YC', models.SmallIntegerField(default=25)),
                ('DeltaTime1', models.IntegerField(default=20)),
                ('DeltaTime2', models.IntegerField(default=60)),
                ('DeltaTime3', models.IntegerField(default=1440)),
                ('DeltaTime4', models.IntegerField(default=60)),
                ('DeltaTime5', models.IntegerField(default=10)),
                ('DeltaTime6', models.IntegerField(default=10080)),
                ('BayID', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='app.Table_Bay', verbose_name='间隔名称')),
            ],
            options={
                'verbose_name': '告警定值表',
                'verbose_name_plural': '告警定值表',
            },
        ),
        migrations.CreateModel(
            name='Table_AlgorithmLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('LogTime', models.DateTimeField(null=True, verbose_name='记录时间')),
                ('Content', models.CharField(max_length=128, null=True, verbose_name='记录内容')),
                ('BayID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Table_Bay', verbose_name='间隔名称')),
            ],
            options={
                'verbose_name': '算法日志表',
                'verbose_name_plural': '算法日志表',
            },
        ),
    ]
